import numpy as np
import random

# Constants
NUM_BALLS = 50
FRAMES = 600
OUTPUT_PATH = 'data.txt'
MAX_V = 1
dt = 0.01
epsilon = -0.2
sensitivity = 0
mu = 1 #0.99
attenuation = 1
collision_count = 0

# Bounds
#polygon = np.array([[0, 0, 1, 0], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 0, 0]])
#polygon = np.array([[0, 0, 1, 1], [1, 1, 2, 0], [2, 0, 1, -1], [1, -1, 0, 0], [0.75, 0.25, 1.25, 0.25], [1.25, 0.25, 1.25, -0.25], [1.25, -0.25, 0.75, -0.25], [0.75, -0.25, 0.75, 0.25], [0.9, 0.1, 1.1, 0.2], [1.1, 0.2, 1.1, 0], [1.1, 0, 1, -0.14], [1, -0.14, 0.8, -0.1], [0.8, -0.1, 0.9, 0.1]]) #list of sides, where each side is two points
#polygon = np.array([[0, 0, 1, 1], [1, 1, 2, 0], [2, 0, 1, -1], [1, -1, 0, 0]])
#polygon = np.array([[0.2375, 0.12333333333333334, 0.08916666666666667, 0.3616666666666667], [0.08916666666666667, 0.3616666666666667, 0.405, 0.37166666666666665], [0.405, 0.37166666666666665, 0.37916666666666665, 0.5966666666666667], [0.37916666666666665, 0.5966666666666667, 0.7958333333333333, 0.5783333333333334], [0.7958333333333333, 0.5783333333333334, 0.82, 0.5183333333333333], [0.82, 0.5183333333333333, 0.7675, 0.37916666666666665], [0.7675, 0.37916666666666665, 1.0, 0.185], [1.0, 0.185, 0.8975, 0.11333333333333333], [0.8975, 0.11333333333333333, 0.7233333333333334, 0.11666666666666667], [0.7233333333333334, 0.11666666666666667, 0.5866666666666667, 0.04083333333333333], [0.5866666666666667, 0.04083333333333333, 0.30416666666666664, 0.059166666666666666], [0.30416666666666664, 0.059166666666666666, 0.2375, 0.12333333333333334]])
#polygon = np.array([[0.8775510204081632, 0.6650660264105642, 0.575030012004802, 0.6662665066026411], [0.575030012004802, 0.6662665066026411, 0.3697478991596639, 0.5078031212484994], [0.3697478991596639, 0.5078031212484994, 0.5090036014405762, 0.2184873949579832], [0.5090036014405762, 0.2184873949579832, 0.8367346938775511, 0.23169267707082833], [0.8367346938775511, 0.23169267707082833, 1.0, 0.3817527010804322], [1.0, 0.3817527010804322, 0.8775510204081632, 0.6650660264105642], [0.49939975990396157, 0.2785114045618247, 0.5462184873949579, 0.24369747899159663], [0.5462184873949579, 0.24369747899159663, 0.5570228091236494, 0.2929171668667467], [0.5570228091236494, 0.2929171668667467, 0.49939975990396157, 0.2785114045618247], [0.8139255702280912, 0.2424969987995198, 0.858343337334934, 0.26290516206482595], [0.858343337334934, 0.26290516206482595, 0.8199279711884754, 0.2857142857142857], [0.8199279711884754, 0.2857142857142857, 0.8139255702280912, 0.2424969987995198], [0.9591836734693877, 0.36014405762304924, 0.9591836734693877, 0.4297719087635054], [0.9591836734693877, 0.4297719087635054, 0.8835534213685474, 0.39255702280912363], [0.8835534213685474, 0.39255702280912363, 0.9591836734693877, 0.36014405762304924], [0.8931572629051621, 0.581032412965186, 0.8067226890756303, 0.6350540216086434], [0.8067226890756303, 0.6350540216086434, 0.8307322929171669, 0.5558223289315727], [0.8307322929171669, 0.5558223289315727, 0.8931572629051621, 0.581032412965186], [0.6158463385354142, 0.6350540216086434, 0.5702280912364946, 0.6134453781512605], [0.5702280912364946, 0.6134453781512605, 0.6182472989195679, 0.56062424969988], [0.6182472989195679, 0.56062424969988, 0.6158463385354142, 0.6350540216086434], [0.8307322929171669, 0.5558223289315727, 0.6182472989195679, 0.56062424969988], [0.48739495798319327, 0.46938775510204084, 0.43337334933973587, 0.44417767106842737], [0.43337334933973587, 0.44417767106842737, 0.43217286914765907, 0.5006002400960384], [0.48739495798319327, 0.46938775510204084, 0.43217286914765907, 0.5006002400960384], [0.6182472989195679, 0.56062424969988, 0.48739495798319327, 0.46938775510204084], [0.48739495798319327, 0.46938775510204084, 0.5570228091236494, 0.2929171668667467], [0.5570228091236494, 0.2929171668667467, 0.8199279711884754, 0.2857142857142857], [0.8199279711884754, 0.2857142857142857, 0.8835534213685474, 0.39255702280912363], [0.8835534213685474, 0.39255702280912363, 0.8307322929171669, 0.5558223289315727]])
#polygon = np.array([[0.47105004906771347, 0.15701668302257116, 0.8253189401373896, 0.15996074582924436], [1.0, 0.4111874386653582, 0.8243375858684985, 0.6486751717369971], [0.8253189401373896, 0.15996074582924436, 1.0, 0.4111874386653582], [0.8243375858684985, 0.6486751717369971, 0.47006869479882235, 0.647693817468106], [0.47006869479882235, 0.647693817468106, 0.3140333660451423, 0.41216879293424924], [0.3140333660451423, 0.41216879293424924, 0.47105004906771347, 0.15701668302257116]])
#polygon = np.array([[0.2857142857142857, 0.3196428571428571, 0.48214285714285715, 0.0875], [0.48214285714285715, 0.0875, 0.6517857142857143, 0.18035714285714285], [0.6517857142857143, 0.18035714285714285, 0.8392857142857143, 0.08660714285714285], [0.8392857142857143, 0.08660714285714285, 1.0, 0.32321428571428573], [1.0, 0.32321428571428573, 0.7830357142857143, 0.5553571428571429], [0.7830357142857143, 0.5553571428571429, 0.6526785714285714, 0.4830357142857143], [0.6526785714285714, 0.4830357142857143, 0.51875, 0.5553571428571429], [0.51875, 0.5553571428571429, 0.2857142857142857, 0.3196428571428571]])
#polygon = np.array([[0.272975432211101, 0.5632393084622384, 0.4940855323020928, 0.17834394904458598], [0.4940855323020928, 0.17834394904458598, 1.0, 0.4367606915377616], [1.0, 0.4367606915377616, 0.727024567788899, 0.6560509554140127], [0.727024567788899, 0.6560509554140127, 0.272975432211101, 0.5632393084622384]])
#polygon = np.array([[0.6682832201745877, 0.1367604267701261, 0.7604267701260912, 0.14936954413191075], [0.7604267701260912, 0.14936954413191075, 0.8486905916585838, 0.18622696411251213], [0.8486905916585838, 0.18622696411251213, 0.9204655674102813, 0.24442289039767218], [0.9204655674102813, 0.24442289039767218, 0.9689621726479146, 0.30358874878758485], [0.9689621726479146, 0.30358874878758485, 0.991270611057226, 0.3792434529582929], [0.991270611057226, 0.3792434529582929, 1.0, 0.45295829291949563], [1.0, 0.45295829291949563, 0.9873908826382153, 0.5363724539282251], [0.9873908826382153, 0.5363724539282251, 0.95635305528613, 0.6071774975751697], [0.95635305528613, 0.6071774975751697, 0.9078564500484966, 0.6595538312318138], [0.9078564500484966, 0.6595538312318138, 0.8428709990300679, 0.7061105722599418], [0.8428709990300679, 0.7061105722599418, 0.7749757516973812, 0.7342386032977691], [0.597478176527643, 0.7400581959262852, 0.5198836081474297, 0.7187196896217265], [0.5198836081474297, 0.7187196896217265, 0.43161978661493694, 0.6624636275460718], [0.43161978661493694, 0.6624636275460718, 0.3831231813773036, 0.5868089233753637], [0.3831231813773036, 0.5868089233753637, 0.35984481086323955, 0.49369544131910764], [0.35984481086323955, 0.49369544131910764, 0.3646944713870029, 0.3957322987390883], [0.3646944713870029, 0.3957322987390883, 0.38700290979631424, 0.3181377303588749], [0.38700290979631424, 0.3181377303588749, 0.4190106692531523, 0.25897187196896215], [0.4190106692531523, 0.25897187196896215, 0.4801163918525703, 0.1959262851600388], [0.4801163918525703, 0.1959262851600388, 0.5577109602327837, 0.15324927255092144], [0.5577109602327837, 0.15324927255092144, 0.6682832201745877, 0.1367604267701261], [0.7749757516973812, 0.7342386032977691, 0.6944713870029098, 0.7478176527643065], [0.6944713870029098, 0.7478176527643065, 0.597478176527643, 0.7400581959262852]])
polygon = np.array([[0.11659663865546219, 0.7058823529411765, 0.555672268907563, 0.3182773109243697], [0.555672268907563, 0.3182773109243697, 1.0, 0.7384453781512605], [1.0, 0.7384453781512605, 0.5525210084033614, 0.16596638655462184], [0.5525210084033614, 0.16596638655462184, 0.11659663865546219, 0.7058823529411765]])
radii = np.full(NUM_BALLS, 1/20)#[random.uniform(1, 1) for _ in range(NUM_BALLS)]
radii_sq = radii * radii
As = polygon[:, 1] - polygon[:, 3]
Bs = polygon[:, 2] - polygon[:, 0]
normals = np.array(list(zip(As, Bs)), np.float64)
magnitudes = np.sqrt(normals[:, 0] ** 2 + normals[:, 1]**2)
print(normals)
print(magnitudes)
normals /= magnitudes[:, None]
print(normals)
Cs = polygon[:, 0]*polygon[:, 3] - polygon[:, 2]*polygon[:, 1]
lower = np.min(np.dstack((polygon[:, 1], polygon[:, 3])), 2)[0]
upper = np.max(np.dstack((polygon[:, 1], polygon[:, 3])), 2)[0]
#intercepts = polygon[:, 3] - slopes * polygon[:, 2]
BOUNDS = np.min(polygon[:, ::2]), np.max(polygon[:, ::2]), np.min(polygon[:, 1::2]), np.max(polygon[:, 1::2])
SIZE = BOUNDS[1] - BOUNDS[0], BOUNDS[3] - BOUNDS[2]
# Variables
#x = np.array([[0.2, 0], [1.7, 0.05]])
x = np.array([np.random.uniform(BOUNDS[0] - SIZE[0] * epsilon, BOUNDS[1] + SIZE[0] * epsilon, NUM_BALLS), np.random.uniform(BOUNDS[2] - SIZE[1] * epsilon, BOUNDS[3] + SIZE[1] * epsilon, NUM_BALLS)], np.float64).T
#xprev = x.copy()
#v = np.array([[1, 0.01], [-1, 0]])#
v = np.random.standard_normal((NUM_BALLS, 2)) * MAX_V
file = open(OUTPUT_PATH, 'w')
for side in polygon:
    file.write(f"{side[0]} {side[1]} {side[2]} {side[3]} ")
file.write("\n")


def magnitude_sq(vec):
    return vec[0] * vec[0] + vec[1] * vec[1]
for n in range(FRAMES):
    x += v * dt
    v *= mu
    num_intersections = np.zeros(NUM_BALLS, np.int32)
    nearest_side = np.zeros(NUM_BALLS, np.int32)
    closest = np.full(NUM_BALLS, 0, np.float64)
    for i in range(polygon.shape[0]): #for each edge
        if (As[i] == 0):
            num_intersections += x[:, 1] == Cs[i]
        else:
            x_isect = -(Cs[i] + Bs[i] * x[:, 1]) / As[i]
            num_intersections += (lower[i] < x[:, 1]) & (x[:, 1] < upper[i]) & (x_isect < x[:, 0])
            #crossed = ((xprev[:, 0] < x_isect) & (x_isect < x[:, 0])) | ((x[:, 0] < x_isect) & (x_isect < xprev[:, 0]))
            proximity_to_line = As[i] * x[:, 0] + Bs[i] * x[:, 1] + Cs[i]
            #print(i, proximity_to_line)
            improved = proximity_to_line > closest
            nearest_side[improved] = i
            closest[improved] = proximity_to_line[improved]
    #xprev = x.copy()
    new_v = v - 2*(v[:, 0] * normals[:, 0][nearest_side] + v[:, 1] * normals[:, 1][nearest_side])[:, None] * normals[nearest_side]
    #x[num_intersections % 2 == 0] = xprev[num_intersections % 2 == 0]
    v[num_intersections % 2 == 0] = new_v[num_intersections % 2 == 0]
    if n == 0:
        x = x[num_intersections % 2 == 1]
        v = v[num_intersections % 2 == 1]
        NUM_BALLS = x.shape[0]
    for i in range(NUM_BALLS):
        for j in range(i+1, NUM_BALLS):
            dx = x[i][0] - x[j][0]
            dy = x[i][1] - x[j][1]
            normal = np.array([dx, dy])
            if magnitude_sq(normal) < (radii_sq[i] + radii_sq[j]):
                #find the average of centers
                average = np.array([(x[i][0] + x[j][0])/2, (x[i][1] + x[j][1])/2])
                #move each ball so that it no longer intersects
                normal = np.array([dx, dy])
                x[i] += normal * (radii_sq[i] + radii_sq[j] - magnitude_sq(normal))/2
                x[j] -= normal * (radii_sq[i] + radii_sq[j] - magnitude_sq(normal))/2
                #get component in normal direction
                towards_i = np.dot(v[i], normal)
                v[i] -= 2*towards_i * normal / magnitude_sq(normal)
                v[i] *= attenuation
                towards_j = np.dot(v[j], normal)
                v[j] -= 2*towards_j * normal / magnitude_sq(normal)
                v[j] *= attenuation
                collision_count += 1
                
    for i in range(NUM_BALLS):
        file.write(f"{(x[i][0] - BOUNDS[0])/SIZE[0]} {(x[i][1] - BOUNDS[2])/SIZE[1]} {v[i][0]} {v[i][1]} {radii[i]*30} ")
    file.write("\n")

file.close()
